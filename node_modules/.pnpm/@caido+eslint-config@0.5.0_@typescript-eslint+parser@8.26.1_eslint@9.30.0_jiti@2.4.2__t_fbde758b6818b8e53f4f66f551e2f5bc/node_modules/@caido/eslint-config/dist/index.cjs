"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  defaultConfig: () => defaultConfig
});
module.exports = __toCommonJS(src_exports);

// src/plugins.ts
var import_js = __toESM(require("@eslint/js"), 1);
var import_eslint_plugin_vue = __toESM(require("eslint-plugin-vue"), 1);
var import_typescript_eslint = __toESM(require("typescript-eslint"), 1);
var import_recommended = __toESM(require("eslint-plugin-prettier/recommended"), 1);
var import_eslint_plugin_compat = __toESM(require("eslint-plugin-compat"), 1);
var import_eslint_plugin_import = __toESM(require("eslint-plugin-import"), 1);
var import_eslint_plugin_n = __toESM(require("eslint-plugin-n"), 1);
var import_flat = __toESM(require("eslint-config-prettier/flat"), 1);

// src/configs/javascript.ts
var javascript = () => {
  return [
    import_js.default.configs.recommended,
    {
      name: "caido/javascript",
      rules: {
        eqeqeq: "error",
        "no-empty-pattern": "off",
        "sort-imports": [
          "warn",
          {
            ignoreCase: true,
            ignoreDeclarationSort: true
          }
        ]
      }
    }
  ];
};

// src/globs.ts
var GLOB_VUE = "**/*.vue";
var GLOB_TS = "**/*.ts";

// src/configs/typescript.ts
var typescript = (options) => {
  return [
    ...import_typescript_eslint.default.configs.recommendedTypeChecked,
    {
      name: "caido/typescript",
      files: [GLOB_TS, ...options.extraFiles.map((file) => `**/*.${file}`)],
      languageOptions: {
        parserOptions: {
          projectService: true,
          extraFileExtensions: [
            ...options.extraFiles.map((file) => `.${file}`)
          ]
        }
      },
      rules: {
        // Disabled
        "@typescript-eslint/no-unsafe-enum-comparison": "off",
        "@typescript-eslint/ban-ts-ignore": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-unsafe-argument": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/restrict-template-expressions": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/no-implied-eval": "off",
        "@typescript-eslint/unbound-method": "off",
        "@typescript-eslint/no-unused-expressions": "off",
        "@typescript-eslint/no-misused-promises": "off",
        "@typescript-eslint/strict-boolean-expressions": "error",
        "@typescript-eslint/consistent-type-imports": [
          "error",
          {
            fixStyle: "inline-type-imports"
          }
        ],
        "@typescript-eslint/switch-exhaustiveness-check": [
          "error",
          {
            considerDefaultExhaustiveForUnions: true
          }
        ],
        // Disable no-unused-vars and uses noUnusedLocals: true in tsconfig.json instead
        // Reference: https://github.com/johnsoncodehk/volar/issues/47
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/no-restricted-types": [
          "error",
          {
            types: {
              null: "Use 'undefined' instead of 'null'"
            }
          }
        ]
      }
    }
  ];
};

// src/configs/vue.ts
var import_vue_eslint_parser = __toESM(require("vue-eslint-parser"), 1);
var vue = (options) => {
  return [
    ...import_eslint_plugin_vue.default.configs["flat/recommended"].map((config) => {
      return {
        ...config,
        files: [GLOB_VUE]
      };
    }),
    {
      name: "caido/vue",
      files: [GLOB_VUE],
      rules: {
        // Disabled because clashes with prettier
        "vue/html-closing-bracket-newline": "off",
        "vue/multi-word-component-names": "off",
        "vue/require-v-for-key": "off",
        "vue/no-template-shadow": "off",
        "vue/valid-v-for": "off",
        "vue/max-attributes-per-line": "off",
        // Necessary configuration due to conflict with eslint-config-prettier
        // https://github.com/prettier/eslint-config-prettier?tab=readme-ov-file#vuehtml-self-closing
        "vue/html-self-closing": [
          "error",
          {
            html: {
              void: "any"
            }
          }
        ]
      },
      languageOptions: {
        parser: import_vue_eslint_parser.default,
        parserOptions: {
          ecmaVersion: "latest",
          // Use different parsers for different languages
          // We do this to improve performance
          // https://github.com/vuejs/vue-eslint-parser/issues/104#issuecomment-875149361
          parser: {
            ts: import_typescript_eslint.default.parser,
            js: import_typescript_eslint.default.parser,
            "<template>": "espree"
          },
          sourceType: "module",
          extraFileExtensions: [
            ...options.extraFiles.map((file) => `.${file}`)
          ]
        }
      }
    }
  ];
};

// src/configs/imports.ts
var imports = () => {
  return [
    import_eslint_plugin_import.default.flatConfigs["recommended"],
    {
      name: "import/typescript",
      ...import_eslint_plugin_import.default.flatConfigs["typescript"]
    },
    {
      name: "caido/imports",
      rules: {
        // Disabled for performance issues
        // Reference: https://typescript-eslint.io/linting/troubleshooting/performance-troubleshooting/#eslint-plugin-import
        "import/namespace": "off",
        "import/first": "error",
        // Disabled since this is already handled by Typescript
        "import/no-unresolved": "off",
        "import/order": [
          "warn",
          {
            "newlines-between": "always",
            warnOnUnassignedImports: true,
            groups: [
              "builtin",
              "external",
              "internal",
              "parent",
              "sibling",
              "index"
            ],
            alphabetize: {
              order: "asc",
              caseInsensitive: true
            }
          }
        ]
      }
    }
  ];
};

// src/configs/compat.ts
var compat = () => {
  return [import_eslint_plugin_compat.default.configs["flat/recommended"]];
};

// src/configs/prettier.ts
var prettier = () => {
  return [
    {
      name: "prettier/recommended",
      ...import_recommended.default
    },
    {
      ...import_flat.default,
      name: "config-prettier/recommended"
    }
  ];
};

// src/configs/ignore.ts
var ignore = () => {
  return [
    {
      name: "caido/ignore",
      ignores: ["**/coverage", "**/dist"]
    }
  ];
};

// src/configs/node.ts
var node = () => {
  return [
    {
      plugins: {
        n: import_eslint_plugin_n.default
      },
      rules: {
        "n/no-unsupported-features/es-builtins": "error",
        "n/no-unsupported-features/es-syntax": "error",
        "n/no-unsupported-features/node-builtins": "error"
      }
    }
  ];
};

// src/index.ts
var DEFAULT_OPTIONS = {
  javascript: true,
  typescript: true,
  vue: true,
  compat: true,
  imports: true,
  prettier: true,
  node: false
};
var defaultConfig = (options = {}) => {
  const finalOptions = {
    ...DEFAULT_OPTIONS,
    ...options
  };
  const extraFilesOptions = {
    extraFiles: []
  };
  if (finalOptions.typescript) {
    extraFilesOptions.extraFiles.push("vue");
    extraFilesOptions.extraFiles.push("tsx");
  }
  return [
    ...ignore(),
    ...finalOptions.javascript ? javascript() : [],
    ...finalOptions.typescript ? typescript(extraFilesOptions) : [],
    ...finalOptions.vue ? vue(extraFilesOptions) : [],
    ...finalOptions.imports ? imports() : [],
    ...finalOptions.compat ? compat() : [],
    ...finalOptions.prettier ? prettier() : [],
    ...finalOptions.node ? node() : []
  ];
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  defaultConfig
});
